{"version":3,"sources":["logo.svg","index.js"],"names":["Square","props","className","onClick","value","Board","i","isHighlight","this","squares","boardItems","renderRow","rowI","rowItems","colI","index","highlightItems","includes","push","renderSquare","React","Component","Game","state","history","Array","Math","pow","fill","location","stepNumber","xIsNext","reverseMoveList","winnerCase","slice","current","length","calcWinnerResult","calculateWinner","moveLocation","row","floor","col","setState","concat","winSquares","step","winner","status","moves","map","move","desc","jumpTo","reverse","alert","handleClick","winCase","currentSquare","copy","board","splice","rowSquares","colSquares","diagSquares","antiSquares","locationToIndex","winSquare","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.96e990c5.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nconst BOARD_SIZE = 5\n\nfunction Square(props) {\n  return (\n    <button className={props.className + \" square\"} onClick={props.onClick}>\n      {props.value}\n    </button>\n  );\n}\n\nclass Board extends React.Component {\n  renderSquare(i, isHighlight) {\n    return (\n      <Square\n        className={isHighlight ? \"highlight\" : \"\"}\n        value={this.props.squares[i]}\n        onClick={() => this.props.onClick(i)}\n      />\n    );\n  }\n\n  render() {\n    let boardItems = []\n    \n    let renderRow = rowI => {\n      let rowItems = []\n      for (let colI = 0; colI < BOARD_SIZE; ++colI) {\n        let index = rowI * BOARD_SIZE + colI\n        let isHighlight = this.props.highlightItems ? this.props.highlightItems.includes(index) : false\n        rowItems.push(this.renderSquare(index, isHighlight))\n      }\n      return (<div className=\"board-row\">{rowItems}</div>)\n    }\n    \n    for(let i = 0; i < BOARD_SIZE; ++i)\n      boardItems.push(renderRow(i))\n    \n    return (\n      <div className=\"center\">\n        {/* <div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div> */}\n        {boardItems}\n      </div>\n    );\n  }\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [\n        {\n          squares: Array(Math.pow(BOARD_SIZE, 2) + 1).fill(null),\n          location: null\n        }\n      ],\n      stepNumber: 0,\n      xIsNext: true,\n      reverseMoveList: false,\n      winnerCase: null,\n      highlightItems: []\n    };\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    let calcWinnerResult = calculateWinner(squares, current.location, this.state.stepNumber)\n   \n    // console.log(Math.floor(i / BOARD_SIZE), i % BOARD_SIZE)\n    let moveLocation = {\n      row: Math.floor(i / BOARD_SIZE),\n      col: i % BOARD_SIZE,\n      index: i\n    }\n\n    if (squares[i] || calcWinnerResult) {\n      return\n    }\n\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\n\n    calcWinnerResult = calculateWinner(squares, moveLocation, this.state.stepNumber + 1)\n\n    this.setState({\n      ...this.state,\n      history: history.concat([\n        {\n          squares: squares,\n          location: moveLocation\n        }\n      ]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext,\n      highlightItems: calcWinnerResult ? calcWinnerResult.winSquares : []\n    });\n  }\n\n  jumpTo(step) {\n    const history = this.state.history.slice(0, step + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    let calcWinnerResult = calculateWinner(squares, current.location, step)\n    this.setState({...this.state,\n      stepNumber: step,\n      xIsNext: (step % 2) === 0,\n      highlightItems: calcWinnerResult ? calcWinnerResult.winSquares : []\n    });\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    let winner = calculateWinner(current.squares, current.location, this.state.stepNumber);\n    winner = winner ? winner.value : winner\n    const moves = history.map((step, move) => {\n      const desc = move ?\n        `Go to move #${move} at (${step.location.col}, ${step.location.row})`:\n        'Go to game start';\n      let className = move == this.state.stepNumber ? 'selected-item' : ''\n      return (\n        <li className={className} key={move}>\n          <button className={className} onClick={() => this.jumpTo(move)}>{desc}</button>\n        </li>\n      );\n    });\n    if (this.state.reverseMoveList) moves.reverse()\n    let status;\n\n    if (winner && winner !== 'draw') {\n      status = \"Winner: \" + winner;\n    }\n    else if (winner === 'draw') {\n      status = 'Match End: Draw'\n      alert(status)\n    }\n    else {\n      status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\n    }\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            highlightItems = {this.state.highlightItems}\n            squares={current.squares}\n            onClick={i => this.handleClick(i)}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <br/>\n          <div>\n            <ol>{moves}</ol>\n            <button onClick={()=>{this.setState({...this.state, reverseMoveList: !this.state.reverseMoveList})}}>Reverse List Order</button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n\nfunction calculateWinner(squares, location, stepNumber) {\n  if (!location) return undefined\n\n  if (stepNumber === Math.pow(BOARD_SIZE, 2)) {\n    return {value: 'draw', winCase: null}\n  }\n\n  let currentSquare = squares[location.row * BOARD_SIZE + location.col]\n\n  let copy = [...squares]\n  let board = []\n  while(copy.length) board.push(copy.splice(0, BOARD_SIZE))\n\n  let rowSquares = []\n  let colSquares = []\n  let diagSquares = []\n  let antiSquares = []\n\n  let locationToIndex = (row, col) => row * BOARD_SIZE + col\n  for(let i = 0; i < BOARD_SIZE; ++i) {\n    if (board[location.row][i] === currentSquare) rowSquares.push(locationToIndex(location.row, i))\n    if (board[i][location.col] === currentSquare) colSquares.push(locationToIndex(i, location.col))\n    if (board[i][i] === currentSquare) diagSquares.push(locationToIndex(i, i))\n    if (board[BOARD_SIZE - i - 1][i] === currentSquare) antiSquares.push(locationToIndex(BOARD_SIZE - i - 1, i))\n  }\n\n  let winSquare = null\n  let winSquares = null\n\n  if (rowSquares.length === BOARD_SIZE) {\n    winSquare = currentSquare\n    winSquares = rowSquares\n  }\n  else if (colSquares.length === BOARD_SIZE) {\n    winSquare = currentSquare\n    winSquares = colSquares\n  }\n  else if (diagSquares.length === BOARD_SIZE) {\n    winSquare = currentSquare\n    winSquares = diagSquares\n  }\n  else if (antiSquares.length === BOARD_SIZE) {\n    winSquare = currentSquare\n    winSquares = antiSquares\n  }\n  if (winSquare) return {value: winSquare, winSquares: winSquares}\n}\n\n"],"sourceRoot":""}